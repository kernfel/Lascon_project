#!/bin/bash
# This program runs the composite network/field model.
#
# Instructions:
#   runsim [drive] [filename] [duration] [size] [rerun]
# 
# Example: 
#   runsim pa ./output/foo 120 10
#
# which runs a 4950-cell (=10*495) sim for 120 s for the Parkinson's 
# disease parameters and saves to ./output/foo*.txt.
#
# Version: 2015jun11

tic=`date +%s` # Get current time
source ~/.bashrc # Gives access to aliases etc.
cd `dirname $0` # Make sure we're in the right directory

# Handle input arguments
driveinput=$1; if [ -z $driveinput ]; then driveinput="all";            fi # Type of drive: "all", "wh", "tc", "bg", or "pa"
 fileinput=$2; if [ -z $filinput   ]; then fileinput="./output/output"; fi # Name of file stem
  duration=$3; if [ -z $duration   ]; then duration=22; 		            fi # Duration in s
   simsize=$4; if [ -z $simsize    ]; then simsize=10;   		         fi # Simulation size; total # cells = simsize*495
 redodrive=$5; if [ -z $redodrive  ]; then redodrive=0;                 fi # Whether to rerun NeuroField -- WARNING, currently disabled due to licensing issues
 inputseed=$6; if [ -z $inputseed  ]; then inputseed=1; 		            fi # Input random seed
  wireseed=$7; if [ -z $wireseed   ]; then wireseed=1; 		            fi # Wiring random seed


if [ $driveinput = "all" ]; then driveinput="wh tc bg pa"; fi # Replace "all" with individual names

for drivetype in $driveinput; do # Loop over all requested field model drive types

   filestem="$fileinput-$drivetype" # Append drive type to file name stem
   
   
   
   
   
   # Save simulation code into a single text file
   codefile=$filestem-sim.txt # Store the sim details

   echo "Timestamp: `date`" > $codefile; echo "" >> $codefile
   echo "~~~~~INPUT ARGUMENTS~~~~~" >> $codefile; echo "runsim $*" >> $codefile # Save input arguments
   for i in {1..5}; do echo "" >> $codefile; done # Make space

   echo "~~~~~runsim~~~~~" >> $codefile; cat runsim >> $codefile # Save this file
   for i in {1..5}; do echo "" >> $codefile; done # Make space

   for file in ./network/*.hoc
	   do echo "~~~~~${file}~~~~~" >> $codefile # Save this file
	   cat $file >> $codefile # Save all hoc files 
	   for i in {1..5}; do echo "" >> $codefile; done # Make space
   done

   for file in ./network/*.py
	   do echo "~~~~~${file}~~~~~" >> $codefile # Save this file
	   cat $file >> $codefile # Save all py files 
	   for i in {1..5}; do echo "" >> $codefile; done # Make space
   done

   echo "~~~~~INTF6.MOD~~~~~" >> $codefile; cat ./network/intf6.mod >> $codefile # Save this file
   for i in {1..5}; do echo "" >> $codefile; done # Make space
   
   
   
   
   
   
   

   # Create field and handle output
   if [ $redodrive -eq 1 ]; then  # Rerun EEG code
      echo "Running NeuroField for $drivetype..."
      ./field/NeuroField -i ./field/fld-$drivetype.cfg
      mv neurofield.output ./output/fld-$drivetype.out
      rm neurofield.dump
   fi
   python ./field/fieldinput.py ./output/fld-$drivetype.out $filestem-fld.txt 2 # 2 is the number of seconds of data to discard from the beginning

   # Find NEURON
   GUI=; if [ $GUI ]; then GUI="-"; fi # Whether or not to use the GUI interface; blank for no, "yes" (...or anything, actually) for yes; "-" makes it keep the prompt
   export HOC_LIBRARY_PATH="./network ./network/hoc" # Add directory for looking for additional hoc (script) files
   if [ -e ./network/x86_64/special ]; then NEURON=./network/x86_64/special # Compiled on a 64-bit machine?
   elif [ -e ./network/i686/special ]; then NEURON=./network/i686/special # Compiled on a 32-bit machine?
   else echo "WARNING: NEURON not compiled! Trying sim anyway..."; sleep 2; NEURON=nrniv
   fi


   # Run the simulation
   $NEURON -c "mytstop=${duration}e3" -c "scale=$simsize" -c "strdef drivetype" -c "drivetype=\"$drivetype\"" -c "inputseed=$inputseed" -c "dvseed=$wireseed" -c "strdef filestem" -c "filestem=\"$filestem\"" ./network/main.hoc $GUI # Set and run
   echo 'Simulation complete...'

   elapsed=$(( `date +%s` - tic )) # Find out elapsed time
   echo "runsim: done; elapsed time: $elapsed s." | tee -a $codefile # Send elapsed time to display, and also save to sim file

done
