// STIMULI.HOC
// This file implemenaturalts different kinds of stimuli -- for example,
// microstimulation and cutaneous touch stimuli.
// Version: 2012oct03 by Cliff Kerr (cliffk@neurosim.downstate.edu)

print "Loading stimuli.hoc..."

load_file("flexinput.hoc")

objref naturalstimpop, naturaldatafile, naturaltsignal, naturalpsignal, naturalcellpop, naturalstimselectedcells, naturaltmpids, naturalcellids // Initialize things for natural stimuli
objref miststimpop, mistdatafile, misttsignal, mistpsignal, mistcellpop, miststimselectedcells, misttmpids, mistcellids // Initialize things for mist stimuli
objref spiketriggeredmistpops, celllist, precell, postcell, microstim, netcon, eventwrapper[2] // Initialize things for spike-triggered mist



////////////////
// HOUSEKEEPING
////////////////
clrshock() // Reset -- probably unnecessary...

// Add a fake stimulus -- stimulus code doesn't work otherwise
for i=0,numcols-1 for j=0,0 for case(&x,SM) for case (&y,AM2) {
        wshock[i][x][y][0] = 0.001 // Something very small -- needs to exist or else the Poisson stim doesn't work
      durshock[i][x][y][0] = 1
     prctshock[i][x][y][0] = 100 // Shock everything, but weights are so low it doesn't matter
        nshock[i][x][y][0] = 1
      isishock[i][x][y][0] = 1
    startshock[i][x][y][0] = 1
 }


/////////////////
// SET PARAMETERS
/////////////////

// Hybrid drive
usehybriddrive=1
if (usehybriddrive) load_file("hybrid.hoc")

// Natural stimuli
usenaturalstimuli=0
	naturalstimpop=new Vector()
	naturalstimpop.append(TC)
	naturalstimrate=100 // Maximum number of spikes/s in natural stimulus
	naturalstimprct=100 // Percent of cells that are being stimulated
	naturalstimweight=30 // stimulus weight
	naturallayers=1e9 // Which layers to select -- 1e9 for all
	naturalstimradius=colside/4 // Radius of selection
	naturalxstimpos=colside/2 // Where in the column to put the stimulus
	naturalystimpos=colside/2 // ...and in the other dimension

// Random MiSt stimuli
userandommist=0
	miststimpop=new Vector()
	miststimpop.append(E4,E5B,E5R)
	miststimrate=20 // Maximum number of spikes/s in mist stimulus
	miststimprct=10 // Percent of cells that are being stimulated
	miststimweight=30 // stimulus weight
	mistlayers=1e9 // Which layers to select -- 1e9 for all; overruled by stimstimpop
	miststimradius=colside // Radius of selection
	mistxstimpos=colside/2 // Where in the column to put the stimulus
	mistystimpos=colside/2 // ...and in the other dimension

// Spike-triggered MiSt
usespiketriggeredmist=0
	spiketriggeredmistpops=new Vector()
	spiketriggeredmistpops.append(E4,E5B,E5R)
	spiketriggeredmistcontrolcell=460*scale // Make sure it's always an I4 cell
	spiketriggeredmistpercent=10 // Percent of cells being stimulated
	spiketriggeredmistweight=30
	spiketriggeredmistdelay=10
	spiketriggeredmistthreshold=10


///////////////////
// NATURAL STIMULUS
///////////////////
if (usenaturalstimuli) {
	print "Creating natural stimulus..."
	// Read in stimulus from file
	strdef naturalinputfile
	naturaldatafile = new File()
	naturaltsignal = new Vector()
	naturalpsignal = new Vector()
	naturalcellids = new Vector()
	naturalstimcellpops=naturalstimpop.size()
	// Read files
	for file=0,1 {
		sprint(naturalinputfile,"%s-in%1.0f.txt",filestem,file*2+1) // Want to loop over files 1 and 3
		naturaldatafile.ropen(naturalinputfile) // Open file ("out file name 5") for reading; generated by makenaturalstims.py
		while (!naturaldatafile.eof()) { // Read from the data file
			naturaltsignal.append(naturaldatafile.scanvar()) // Read time point
			naturalpsignal.append(naturaldatafile.scanvar()) // Read probability
			naturaldatafile.scanvar() // Read and reject event data, which is the third column
			}
		naturaldatafile.close() // Close the input file
	}
	naturalstimrate/=1000 // Convert from Hz to ms^-1

	// Add stimulus to a particular spatial region (...receptive field?)
	naturalstimselectedcells = new NQS("cellid","distance")
	for i=0,naturalstimcellpops-1 {
		col.ce.o[0].floc(naturalxstimpos,naturalystimpos,naturallayers,naturalstimselectedcells.getcol("cellid"),naturalstimselectedcells.getcol("distance"),naturalstimradius,naturalstimpop.x[i])
		naturaltmpids=naturalstimselectedcells.getcol("cellid") // Only need the cell ID
		naturalcellids.append(naturaltmpids) // Append to the list of all cell IDs
	}
	if (naturalcellids.size>0) {
		print "Number of cells receiving natural stimulus: ", naturalcellids.size()
		naturalsynapse=AM2 // Which synapsenapses to stimulate
		poisforcell(naturaltsignal,naturalpsignal,naturalstimrate,naturalcellids,naturalstimweight,naturalsynapse) // Add natural stimulus
	} else print "WARNING: no cells received natural stimuli!"
	print "...done."
}



//////////////
// RANDOM MIST
//////////////
if (userandommist) {
	print "Creating mist stimulus..."
	// Read in stimulus from file
	strdef mistinputfile
	mistdatafile = new File()
	misttsignal = new Vector()
	mistpsignal = new Vector()
	mistcellids = new Vector()
	miststimcellpops=miststimpop.size()
	sprint(mistinputfile,"%s-in2.txt",filestem)
	mistdatafile.ropen(mistinputfile) // Open file ("out file name 5") for reading; generated by makemiststims.py
	while (!mistdatafile.eof()) { // Read from the data file
		misttsignal.append(mistdatafile.scanvar()) // Read time point
		mistpsignal.append(mistdatafile.scanvar()) // Read probability
		mistdatafile.scanvar() // Read and reject event data, which is the third column
		}
	mistdatafile.close() // Close the input file
	miststimrate/=1000 // Convert from Hz to ms^-1

	// Add stimulus to a particular spatial region (...receptive field?)
	miststimselectedcells = new NQS("cellid","distance")
	for i=0,miststimcellpops-1 {
		col.ce.o[0].floc(mistxstimpos,mistystimpos,mistlayers,miststimselectedcells.getcol("cellid"),miststimselectedcells.getcol("distance"),miststimradius,miststimpop.x[i])
		misttmpids=miststimselectedcells.getcol("cellid") // Only need the cell ID
		mistcellids.append(misttmpids) // Append to the list of all cell IDs
	}
	if (mistcellids.size>0) {
		print "Number of cells receiving random MiSt stimulus: ", mistcellids.size()
		mistsynapse=AM2 // Which synapsenapses to stimulate
		poisforcell(misttsignal,mistpsignal,miststimrate,mistcellids,miststimweight,mistsynapse) // Add mist stimulus
	} else print "WARNING: no cells received mist stimuli!"
	print "...done."
}



if (userandommist || usenaturalstimuli || usehybriddrive) setshock(0) // If no argument, it resets the stimulus I believe...



///////////////////////
// SPIKE-TRIGGERED MIST
///////////////////////
// This code adds a cell-triggered microstim input 
// to an intfcol-derived simulation. Adapted from 
// wire2col in col.hoc.
// Version: 2012may23

proc startmist() { celllist.o(spiketriggeredmistcontrolcell).flag("dead",0) }
proc stopmist()  { celllist.o(spiketriggeredmistcontrolcell).flag("dead",1) }
proc startmistwrapper() { cvode.event(mist1sta*1000,"startmist()") }
proc stopmistwrapper()  { cvode.event(mist1fin*1000,"stopmist()") }

if (usespiketriggeredmist) {
	celllist=col.ce
	precell=celllist.o(spiketriggeredmistcontrolcell)
	precell.flag("out",1)
	microstim = new List()
	for cell=0,celllist.count-1 {
		postcell = celllist.o(cell)
		if (cell!=spiketriggeredmistcontrolcell && spiketriggeredmistpops.contains(postcell.type) && spiketriggeredmistpercent>100*randcond.repick()) { // Don't add a connection if: it's the firing cell; it's the wrong population; the probability doesn't meet the threshold
			netcon=new NetCon(precell,postcell,spiketriggeredmistthreshold,spiketriggeredmistdelay,spiketriggeredmistweight)
			microstim.append(netcon)
		}
	}
	print "Number of cells receiving spike-triggered MiSt: ", microstim.count()
	print "Population type of control cell: ", celllist.o(spiketriggeredmistcontrolcell).type
	
	stopmist()
	eventwrapper[0] = new FInitializeHandler("startmistwrapper()")
	eventwrapper[1] = new FInitializeHandler("stopmistwrapper()")
}

print "stimuli.hoc: done"
