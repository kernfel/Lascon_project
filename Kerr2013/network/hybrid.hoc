// HYBRID.HOC
// This code reads in firing rates from field model
// time series, and turns these into Poisson-distributed
// spike trains.
// Version: 2012nov24 by Cliff Kerr (cliffk@neurosim.downstate.edu)

print "Loading hybrid.hoc..."

// Set parameters -- see also stimrate, defined for each population below
stimprct=100 // Percent of cells that are being stimulated
whichsy=AM2 // Which synapse(s) to stimulate
stimwt=0.8 // Stimulus weight
overallrate=1.5 // Overall firing rate modulation factor
erate=1.0*overallrate // Excitatory rate
irate=0.7*overallrate // Inhibitory rate
// Maximum number of spikes/s in hybrid stimulus  -- 1000 is for Hz to ms^-1 conversion
if (!strcmp(drivetype,"wh")) stimrate=1634/1000 // These are normalization factors to get the average firing rate right
if (!strcmp(drivetype,"tc")) stimrate=514.5/1000 
if (!strcmp(drivetype,"bg")) stimrate=750/1000 
if (!strcmp(drivetype,"pa")) stimrate=750/1000 

// Read in data
print "    Reading in data..."
// Number of output traces from eegcode
if (!strcmp(drivetype,"wh")) nfieldpops=1 
if (!strcmp(drivetype,"tc")) nfieldpops=4
if (!strcmp(drivetype,"bg")) nfieldpops=9
if (!strcmp(drivetype,"pa")) nfieldpops=9

objref fieldinputfile, tsignal, psignal, allpsignals
strdef inputfile
tsignal = new Vector() // Time vector
psignal = new Vector() // Probability vector
allpsignals = new List()
for i=0,nfieldpops-1 allpsignals.append(psignal)
fieldinputfile = new File()
sprint(inputfile,"../%s-fld.txt",filestem)
fieldinputfile.ropen(inputfile) // Open file ("out file name 5") for reading; generated by makestims.py
while (!fieldinputfile.eof()) { // Read from the data file
	tsignal.append(fieldinputfile.scanvar()) // Read time point
	for i=0,nfieldpops-1 allpsignals.o[i].append(fieldinputfile.scanvar()) // Read probability
	if (tsignal.x[tsignal.size()-1]>=mytstop) break // Don't continue reading if enough data already
}
fieldinputfile.close() // Close the input file




print "    Creating drive..."
strdef brainregion
objref fielddrive
fielddrive = new List()

// Procedure for adding external drive to cell populations -- clunky but no way to append to a matrix
obfunc adddrive() { local fieldpop, rate, npops, ratemod localobj cellpops, thisdrive
	brainregion=$s1
	fieldpop=$2
	rate=$3
	
	cellpops = new Vector()
	if (!strcmp(brainregion,"ecort")) cellpops.append(E2,E4,E5B,E5R,E6) ratemod=erate
	if (!strcmp(brainregion,"icort")) cellpops.append(I2,I4,I5,I6,I2L,I4L,I5L,I6L) ratemod=irate
	if (!strcmp(brainregion,"ethal")) cellpops.append(TC) ratemod=erate
	if (!strcmp(brainregion,"ithal")) cellpops.append(IRE) ratemod=irate
	npops=cellpops.size()
	
	for i=0,npops-1 {
		thisdrive = new Vector()
		thisdrive.append(cellpops.x[i],fieldpop,rate*ratemod)
		fielddrive.append(thisdrive)
	}
	return fielddrive
}

// User-set matrix -- from the eegcode config file
// White noise
if (!strcmp(drivetype,"wh")) {
	adddrive("ecort",1,1.0)
	adddrive("icort",1,1.0)
	adddrive("ethal",1,1.0)
	adddrive("ithal",1,1.0)
// Thalamocortical system
} else if (!strcmp(drivetype,"tc")) { 
	adddrive("ecort",1,1.0) // 1
	adddrive("icort",1,1.0) // 2
	adddrive("ithal",1,0.2) // 3
	adddrive("ethal",1,1.0) // 4
	adddrive("ecort",2,1.5) // 5
	adddrive("icort",2,1.5) // 6
	adddrive("ethal",3,0.7) // 7
	adddrive("ecort",4,1.0) // 8
	adddrive("icort",4,1.0) // 9
	adddrive("ithal",4,0.2) // 10
} else if (!strcmp(drivetype,"bg")) { // Basal ganglia
	adddrive("ecort", 1,1.0) // 1
	adddrive("icort", 1,1.0) // 2
	adddrive("ethal", 1,0.5) // 6
	adddrive("ithal", 1,0.1) // 7
	adddrive("ecort", 2,1.0) // 8
	adddrive("icort", 2,1.0) // 9
	adddrive("ethal", 5,0.1) // 14
	adddrive("ecort", 8,0.3) // 20
	adddrive("icort", 8,0.3) // 21
	adddrive("ithal", 8,0.1) // 24
	adddrive("ethal", 9,0.3) // 25
} else if (!strcmp(drivetype,"pa")) { // Parkinson's
	adddrive("ecort", 1,1.0) // 1
	adddrive("icort", 1,1.0) // 2
	adddrive("ethal", 1,0.5) // 6
	adddrive("ithal", 1,0.1) // 7
	adddrive("ecort", 2,1.0) // 8
	adddrive("icort", 2,1.0) // 9
	adddrive("ethal", 5,0.1) // 14
	adddrive("ecort", 8,0.3) // 20
	adddrive("icort", 8,0.3) // 21
	adddrive("ithal", 8,0.1) // 24
	adddrive("ethal", 9,0.3) // 25
}

print "    Creating spikes..."
objref thisfield
ndrives=fielddrive.count()
for dr=0,ndrives-1 {
	{fprint("      %g of %g...\n",dr+1,ndrives)}
	thiscellpop=fielddrive.o[dr].x[0]
	thisfield=allpsignals.o[fielddrive.o[dr].x[1]-1]
	thisrate=fielddrive.o[dr].x[2]
	poisforpop(tsignal,thisfield,stimrate*thisrate,thiscellpop,stimprct,stimwt,whichsy)
}

print "hybrid.hoc: done"
